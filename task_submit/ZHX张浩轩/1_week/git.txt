	--原理:
	Git是分布式版本控制系统, 相对于集中式控制系统来讲(必须联网才能工作),  它没有中央服务器, 每个人的电脑上都是一个完整的版本库, 工作的时候就不需要联网, 但是通常来讲, 由于特殊原因, 分布式版本控制系统也有一台中央服务器, 但这个服务器仅仅是用来方便交换大家的修改, 没有它也可以一样干活, 只是不太方便.
	从根本上来讲, Git是一套内容寻址文件系统, 在一个新目录或已有目录内执行 git init 时，Git 会创建一个 .git 目录，几乎所有 Git 存储和操作的内容都位于该目录下, 如果你要备份或复制一个库，基本上将这一目录拷贝至其他地方就可以了.
	Git的核心是它的仓库, repository, 这个文件夹里面的所有文件都可以被Git管理起来, 每个文件的修改, 删除, 都能跟踪, 以便在将来可以还原.对于任何一个文件, 在Git内部只有三种状态, 已暂存(staged), 已修改(modified), 已提交(committed). 已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中. 相对应的为: 工作区域, 暂存区域, 本地仓库. 使用Git的流程如下: 1.在工作目录下修改文件. 2.保存修改文件到暂存区域. 3.提交更新, 永远存储在Git目录中.
	--分支:
	Git 保存的不是文件差异或者变化量，而只是一系列文件快照. 在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息等. Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针. Git 会使用 master 作为分支的默认名字. 在若干次提交后，其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动. 而HEAD指针则指向当前工作的分支, 可以使用checkout来改变HEAD指向的分支. (具体图片请参考Git官网教程的分支一章)
	分支好比流水线, 我们可以在master中保留能够稳定运行的代码, 再创建一个分支, 专门用于后续的开发, 或用于稳定性测试, 也就是说如果这样的话master的指针总是落后一大截, 而另外的分支的指针会比较靠前.
	让当前分支还原到某个历史版本的话, 首先使用git log查看提交记录, 然后git reset --hard commit ID即可.
	总而言之, git确实能变向地大大提高我们写大型项目的效率, 我们也不必担心为修改某些内容而出莫名其妙的bug而担心, 只需要即时commit即可, 或者使用上文的方法, 再开一个分支, 然后进行测试与修改, 最终合并到主分支上面, 这些如果没有git的话是很不方便的, 需要自己一次一次保存副本或提心吊胆的修改代码, 有了git以后这些也就不成问题了.

